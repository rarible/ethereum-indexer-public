package com.rarible.protocol.order.core.service

import com.rarible.core.common.nowMillis
import com.rarible.ethereum.domain.EthUInt256
import com.rarible.ethereum.sign.domain.EIP712Domain
import com.rarible.ethereum.sign.service.ERC1271SignService
import com.rarible.protocol.dto.PrepareOrderTxFormDto
import com.rarible.protocol.order.core.configuration.OrderIndexerProperties
import com.rarible.protocol.order.core.model.Asset
import com.rarible.protocol.order.core.model.Erc20AssetType
import com.rarible.protocol.order.core.model.Erc721AssetType
import com.rarible.protocol.order.core.model.EthAssetType
import com.rarible.protocol.order.core.model.OpenSeaOrderFeeMethod
import com.rarible.protocol.order.core.model.OpenSeaOrderHowToCall
import com.rarible.protocol.order.core.model.OpenSeaOrderSaleKind
import com.rarible.protocol.order.core.model.OpenSeaOrderSide
import com.rarible.protocol.order.core.model.Order
import com.rarible.protocol.order.core.model.OrderOpenSeaV1DataV1
import com.rarible.protocol.order.core.model.OrderType
import io.daonomic.rpc.domain.Binary
import io.mockk.every
import io.mockk.mockk
import kotlinx.coroutines.runBlocking
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test
import scalether.domain.Address
import java.math.BigInteger

internal class PrepareTxServiceTest {
    private val transferProxyService = mockk<TransferProxyService>()
    private val eip712Domain = mockk<EIP712Domain>()
    private val erc1271SignService = mockk<ERC1271SignService>()
    private val orderInvertService = OrderInvertService(CallDataEncoder())
    private val exchangeContractAddresses = mockk<OrderIndexerProperties.ExchangeContractAddresses> {
        every { openSeaV1 } returns Address.apply("0x5206e78b21ce315ce284fb24cf05e0585a93b1d9")
    }
    private val orderIndexerProperties = mockk<OrderIndexerProperties> {
        every { operatorPrivateKey } returns Binary.apply()
        every { protocolCommission } returns 0
    }

    private val prepareTxService = PrepareTxService(
        transferProxyService = transferProxyService,
        exchangeContractAddresses = exchangeContractAddresses,
        eip712Domain = eip712Domain,
        orderInvertService = orderInvertService,
        erc1271SignService = erc1271SignService,
        orderIndexerProperties = orderIndexerProperties
    )

    @Test
    fun `should prepare tx for sell order of erc721`() = runBlocking<Unit> {
        val sellOrder = Order(
            maker = Address.apply("0x47921676a46ccfe3d80b161c7b4ddc8ed9e716b6"),
            taker = null,
            make = Asset(
                Erc721AssetType(
                    Address.apply("0x509fd4cdaa29be7b1fad251d8ea0fca2ca91eb60"),
                    EthUInt256.of(110711)
                ),
                EthUInt256.ONE
            ),
            take = Asset(EthAssetType, EthUInt256.of(18000000000000000)),
            makeStock = EthUInt256.TEN,
            type = OrderType.OPEN_SEA_V1,
            fill = EthUInt256.ZERO,
            cancelled = false,
            salt = EthUInt256.of(BigInteger("40282277954198974490075351067899553148208040959538540464933455492711140919588")),
            start = 1628128305,
            end = null,
            data = OrderOpenSeaV1DataV1(
                exchange = Address.apply("0x5206e78b21ce315ce284fb24cf05e0585a93b1d9"),
                makerRelayerFee = BigInteger.valueOf(250),
                takerRelayerFee = BigInteger.ZERO,
                makerProtocolFee = BigInteger.ZERO,
                takerProtocolFee = BigInteger.ZERO,
                feeRecipient = Address.apply("0x5b3256965e7c3cf26e11fcaf296dfc8807c01073"),
                feeMethod = OpenSeaOrderFeeMethod.SPLIT_FEE,
                side = OpenSeaOrderSide.SELL,
                saleKind = OpenSeaOrderSaleKind.FIXED_PRICE,
                howToCall = OpenSeaOrderHowToCall.CALL,
                callData = Binary.apply("0x23b872dd00000000000000000000000047921676a46ccfe3d80b161c7b4ddc8ed9e716b60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001b077"),
                replacementPattern = Binary.apply("0x000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000"),
                staticTarget = Address.ZERO(),
                staticExtraData = Binary.apply(),
                extra = BigInteger.ZERO,
                target = null,
                nonce = null
            ),
            signature = Binary
                .apply("0x4a1e22da1568466b87c23ea9d72872ed59a03618ed545b949ce04ed2f1e1923e")
                .add(Binary.apply("0x6b552f783621eb77caa1c616300ac230a149b9384a5be1f8ab9599db7e0d4c79"))
                .add(Binary.apply(byteArrayOf(27))),
            createdAt = nowMillis(),
            lastUpdateAt = nowMillis()
        )
        val form = PrepareOrderTxFormDto(
            maker = Address.apply("0x6c8ba1dafb22eae61e9cd3da724cbc3d164c27b9"),
            amount = BigInteger.ONE,
            originFees = emptyList(),
            payouts = emptyList()
        )
        val response = prepareTxService.prepareTransaction(sellOrder, form)

        val data = response.transaction.data
        clearBuyStart(data)
        clearBuySalt(data)
        clearMetadata(data)

        val origin = Binary.apply("0xab834bab0000000000000000000000005206e78b21ce315ce284fb24cf05e0585a93b1d90000000000000000000000006c8ba1dafb22eae61e9cd3da724cbc3d164c27b900000000000000000000000047921676a46ccfe3d80b161c7b4ddc8ed9e716b60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000509fd4cdaa29be7b1fad251d8ea0fca2ca91eb60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005206e78b21ce315ce284fb24cf05e0585a93b1d900000000000000000000000047921676a46ccfe3d80b161c7b4ddc8ed9e716b600000000000000000000000000000000000000000000000000000000000000000000000000000000000000005b3256965e7c3cf26e11fcaf296dfc8807c01073000000000000000000000000509fd4cdaa29be7b1fad251d8ea0fca2ca91eb600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003ff2e795f50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000610b48d500000000000000000000000000000000000000000000000000000000000000008255db72c18e69c87034873369623d7fed5440d44b906f5844cad091a4a7056900000000000000000000000000000000000000000000000000000000000000fa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003ff2e795f50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000610b44310000000000000000000000000000000000000000000000000000000000000000590ef61b839f6f6a5b9ad9792986f2c3bc211cffcdb37643fea1f1ee9aca0000000000000000000000000000000000000000000000000000000000000074000000000000000000000000000000000000000000000000000000000000007e0000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000009200000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000001b000000000000000000000000000000000000000000000000000000000000001b4a1e22da1568466b87c23ea9d72872ed59a03618ed545b949ce04ed2f1e1923e6b552f783621eb77caa1c616300ac230a149b9384a5be1f8ab9599db7e0d4c794a1e22da1568466b87c23ea9d72872ed59a03618ed545b949ce04ed2f1e1923e6b552f783621eb77caa1c616300ac230a149b9384a5be1f8ab9599db7e0d4c790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006423b872dd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000006c8ba1dafb22eae61e9cd3da724cbc3d164c27b9000000000000000000000000000000000000000000000000000000000001b07700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006423b872dd00000000000000000000000047921676a46ccfe3d80b161c7b4ddc8ed9e716b60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001b07700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006400000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
        clearBuyStart(origin)
        clearBuySalt(origin)

        assertThat(data).isEqualTo(origin)
    }

    @Test
    fun `should prepare cancel tx for sell order of erc721`() = runBlocking<Unit> {
        val sellOrder = Order(
            maker = Address.apply("0x47921676a46ccfe3d80b161c7b4ddc8ed9e716b6"),
            taker = null,
            make = Asset(
                Erc721AssetType(
                    Address.apply("0x509fd4cdaa29be7b1fad251d8ea0fca2ca91eb60"),
                    EthUInt256.of(110711)
                ),
                EthUInt256.ONE
            ),
            take = Asset(EthAssetType, EthUInt256.of(133000000000000000)),
            makeStock = EthUInt256.TEN,
            type = OrderType.OPEN_SEA_V1,
            fill = EthUInt256.ZERO,
            cancelled = false,
            salt = EthUInt256.of(BigInteger("94075436137300584109920163749311521813551693230538482170487180241919466255247")),
            start = 1628588093,
            end = null,
            data = OrderOpenSeaV1DataV1(
                exchange = Address.apply("0x5206e78b21ce315ce284fb24cf05e0585a93b1d9"),
                makerRelayerFee = BigInteger.valueOf(250),
                takerRelayerFee = BigInteger.ZERO,
                makerProtocolFee = BigInteger.ZERO,
                takerProtocolFee = BigInteger.ZERO,
                feeRecipient = Address.apply("0x5b3256965e7c3cf26e11fcaf296dfc8807c01073"),
                feeMethod = OpenSeaOrderFeeMethod.SPLIT_FEE,
                side = OpenSeaOrderSide.SELL,
                saleKind = OpenSeaOrderSaleKind.FIXED_PRICE,
                howToCall = OpenSeaOrderHowToCall.CALL,
                callData = Binary.apply("0x23b872dd00000000000000000000000047921676a46ccfe3d80b161c7b4ddc8ed9e716b60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001b077"),
                replacementPattern = Binary.apply("0x000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000"),
                staticTarget = Address.ZERO(),
                staticExtraData = Binary.apply(),
                extra = BigInteger.ZERO,
                target = null,
                nonce = null
            ),
            signature = Binary
                .apply("0x4232ed041f058749aaa45551c1c2a3efd4754065deaf194795159e5fd1335d47")
                .add(Binary.apply("0x7f4111bcaf88bfdd7dca31c204c0db6788230cfb5eb6a6ed3f2c56c35bf7e675"))
                .add(Binary.apply(byteArrayOf(28))),
            createdAt = nowMillis(),
            lastUpdateAt = nowMillis()
        )
        val response = prepareTxService.prepareCancelTransaction(sellOrder)

        val data = response.data
        val origin = Binary.apply("0xa8a41c700000000000000000000000005206e78b21ce315ce284fb24cf05e0585a93b1d900000000000000000000000047921676a46ccfe3d80b161c7b4ddc8ed9e716b600000000000000000000000000000000000000000000000000000000000000000000000000000000000000005b3256965e7c3cf26e11fcaf296dfc8807c01073000000000000000000000000509fd4cdaa29be7b1fad251d8ea0fca2ca91eb600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d882cb9b2080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006112483d0000000000000000000000000000000000000000000000000000000000000000cffccf577da3209cfef62013432a7e215160a6bc3a77f38ffeeb4c1b96e7b38f0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000003e00000000000000000000000000000000000000000000000000000000000000480000000000000000000000000000000000000000000000000000000000000001c4232ed041f058749aaa45551c1c2a3efd4754065deaf194795159e5fd1335d477f4111bcaf88bfdd7dca31c204c0db6788230cfb5eb6a6ed3f2c56c35bf7e675000000000000000000000000000000000000000000000000000000000000006423b872dd00000000000000000000000047921676a46ccfe3d80b161c7b4ddc8ed9e716b60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001b077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")

        assertThat(data).isEqualTo(origin)
    }

    @Test
    fun `should prepare tx for buy order of erc721`() = runBlocking<Unit> {
        val buyOrder = Order(
            maker = Address.apply("0x47921676a46ccfe3d80b161c7b4ddc8ed9e716b6"),
            taker = null,
            make = Asset(
                Erc20AssetType(
                    Address.apply("0xc778417e063141139fce010982780140aa0cd5ab")
                ),
                EthUInt256.of(13000000000000000)),
            take = Asset(
                Erc721AssetType(
                    Address.apply("0x509fd4cdaa29be7b1fad251d8ea0fca2ca91eb60"),
                    EthUInt256.of(110711)
                ),
                EthUInt256.ONE
            ),
            makeStock = EthUInt256.TEN,
            type = OrderType.OPEN_SEA_V1,
            fill = EthUInt256.ZERO,
            cancelled = false,
            salt = EthUInt256.of(BigInteger("81538619411536663679971542969406122025226616498230290046022479480700489875715")),
            start = 1628140271,
            end = 1628745154,
            data = OrderOpenSeaV1DataV1(
                exchange = Address.apply("0x5206e78b21ce315ce284fb24cf05e0585a93b1d9"),
                makerRelayerFee = BigInteger.ZERO,
                takerRelayerFee = BigInteger.valueOf(250),
                makerProtocolFee = BigInteger.ZERO,
                takerProtocolFee = BigInteger.ZERO,
                feeRecipient = Address.apply("0x5b3256965e7c3cf26e11fcaf296dfc8807c01073"),
                feeMethod = OpenSeaOrderFeeMethod.SPLIT_FEE,
                side = OpenSeaOrderSide.BUY,
                saleKind = OpenSeaOrderSaleKind.FIXED_PRICE,
                howToCall = OpenSeaOrderHowToCall.CALL,
                callData = Binary.apply("0x23b872dd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000047921676a46ccfe3d80b161c7b4ddc8ed9e716b6000000000000000000000000000000000000000000000000000000000001b077"),
                replacementPattern = Binary.apply("0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
                staticTarget = Address.ZERO(),
                staticExtraData = Binary.apply(),
                extra = BigInteger.ZERO,
                target = null,
                nonce = null
            ),
            signature = Binary
                .apply("0x795def388ba0e82cf711448a6a36f64868d340b53a2f5277e9fc37651a156007")
                .add(Binary.apply("0x4c045da9e384ce70007ee08aa7602a1808a873d35ac2561f343ec1ab1d80ae4f"))
                .add(Binary.apply(byteArrayOf(28))),
            createdAt = nowMillis(),
            lastUpdateAt = nowMillis()
        )
        val form = PrepareOrderTxFormDto(
            maker = Address.apply("0x6c8ba1dafb22eae61e9cd3da724cbc3d164c27b9"),
            amount = BigInteger.ONE,
            originFees = emptyList(),
            payouts = emptyList()
        )
        val response = prepareTxService.prepareTransaction(buyOrder, form)

        val data = response.transaction.data
        clearSellStart(data)
        clearSellSalt(data)
        clearMetadata(data)

        val origin = Binary.apply("0xab834bab0000000000000000000000005206e78b21ce315ce284fb24cf05e0585a93b1d900000000000000000000000047921676a46ccfe3d80b161c7b4ddc8ed9e716b600000000000000000000000000000000000000000000000000000000000000000000000000000000000000005b3256965e7c3cf26e11fcaf296dfc8807c01073000000000000000000000000509fd4cdaa29be7b1fad251d8ea0fca2ca91eb600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c778417e063141139fce010982780140aa0cd5ab0000000000000000000000005206e78b21ce315ce284fb24cf05e0585a93b1d90000000000000000000000006c8ba1dafb22eae61e9cd3da724cbc3d164c27b900000000000000000000000047921676a46ccfe3d80b161c7b4ddc8ed9e716b60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000509fd4cdaa29be7b1fad251d8ea0fca2ca91eb600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c778417e063141139fce010982780140aa0cd5ab000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e2f6e5e148000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000610b72ef000000000000000000000000000000000000000000000000000000006114adc2b445391e65f8ab6788b0a9ec0b0cd3fbc35d78668c6e7d556de6e66fd2b2c103000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e2f6e5e148000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000610b747900000000000000000000000000000000000000000000000000000000000000006bfa8053a0850345faeb52c8c4ffcc4c83651c18b83ba4ff6c6756a0d6a1c63ca0000000000000000000000000000000000000000000000000000000000000074000000000000000000000000000000000000000000000000000000000000007e0000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000009200000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001c795def388ba0e82cf711448a6a36f64868d340b53a2f5277e9fc37651a1560074c045da9e384ce70007ee08aa7602a1808a873d35ac2561f343ec1ab1d80ae4f795def388ba0e82cf711448a6a36f64868d340b53a2f5277e9fc37651a1560074c045da9e384ce70007ee08aa7602a1808a873d35ac2561f343ec1ab1d80ae4f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006423b872dd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000047921676a46ccfe3d80b161c7b4ddc8ed9e716b6000000000000000000000000000000000000000000000000000000000001b07700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006423b872dd0000000000000000000000006c8ba1dafb22eae61e9cd3da724cbc3d164c27b90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001b07700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006400000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
        clearSellStart(origin)
        clearSellSalt(origin)

        assertThat(data).isEqualTo(origin)
    }

    private fun clearBuyStart(data: Binary) {
        cleaBytes(data, 672, 4)
    }

    private fun clearBuySalt(data: Binary) {
        cleaBytes(data, 708, 32)
    }

    private fun clearSellStart(data: Binary) {
        cleaBytes(data, 960, 4)
    }

    private fun clearSellSalt(data: Binary) {
        cleaBytes(data, 996, 32)
    }

    private fun clearMetadata(data: Binary) {
        cleaBytes(data, 1668, 32)
    }

    private fun cleaBytes(data: Binary, offset: Int, count: Int) {
        for (i in 0 until count) {
            data.bytes()[offset + i] = 0
        }
    }
}
