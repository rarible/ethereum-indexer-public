package com.rarible.protocol.order.listener.service.zero.ex

import com.rarible.protocol.contracts.exchange.zero.ex.FillEvent
import com.rarible.protocol.order.core.model.ZeroExFeeData
import com.rarible.protocol.order.core.model.ZeroExMatchOrdersData
import com.rarible.protocol.order.core.model.ZeroExOrder
import com.rarible.protocol.order.core.trace.TraceCallService
import io.daonomic.rpc.domain.Binary
import io.daonomic.rpc.domain.Word
import io.mockk.every
import io.mockk.impl.annotations.InjectMockKs
import io.mockk.impl.annotations.MockK
import io.mockk.junit5.MockKExtension
import kotlinx.coroutines.runBlocking
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.extension.ExtendWith
import scalether.domain.Address
import scalether.domain.response.Log
import scalether.java.Lists
import java.math.BigInteger

@ExtendWith(MockKExtension::class)
class ZeroExOrderParserTest {

    @InjectMockKs
    private lateinit var zeroExParser: ZeroExOrderParser

    @MockK
    private lateinit var traceCallService: TraceCallService

    @Test
    fun `parse input for buying by sell order`() = runBlocking<Unit> {
        // https://polygonscan.com/tx/0x08ef7447c15669631b1b54bf6b035df31c0b3b19720a760b2093db8b1eeb14cb
        val txInput = Binary.apply(
            "0xbbbfa60c" +
                // 192
                "00000000000000000000000000000000000000000000000000000000000000c0" +
                // 992
                "00000000000000000000000000000000000000000000000000000000000003e0" +
                // 1824
                "0000000000000000000000000000000000000000000000000000000000000720" +
                // 1952
                "00000000000000000000000000000000000000000000000000000000000007a0" +
                // 2080
                "0000000000000000000000000000000000000000000000000000000000000820" +

                "0000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619" +

                // makerAddress
                "0000000000000000000000004d3b39791d9bfe56304b32c35fe8f3d411d85a02" +
                // takerAddress
                "0000000000000000000000000000000000000000000000000000000000000000" +
                // feeRecipientAddress
                "000000000000000000000000f715beb51ec8f63317d66f491e37e7bb048fcc2d" +
                // senderAddress
                "000000000000000000000000f715beb51ec8f63317d66f491e37e7bb048fcc2d" +
                // makerAssetAmount 1520000000000000
                "0000000000000000000000000000000000000000000000000005666e940f0000" +
                // takerAssetAmount 1
                "0000000000000000000000000000000000000000000000000000000000000001" +
                // makerFee 0
                "0000000000000000000000000000000000000000000000000000000000000000" +
                // takerFee 0
                "0000000000000000000000000000000000000000000000000000000000000000" +
                // expirationTimeSeconds 1650013671
                "00000000000000000000000000000000000000000000000000000000625935e7" +
                // salt 97119520864459265
                "000000000000000000000000000000000000000000000000015909b08de1da01" +

                // 448
                "00000000000000000000000000000000000000000000000000000000000001c0" +
                // 544
                "0000000000000000000000000000000000000000000000000000000000000220" +
                // 672
                "00000000000000000000000000000000000000000000000000000000000002a0" +
                // 736
                "00000000000000000000000000000000000000000000000000000000000002e0" +

                // 36 - size of makerAssetData
                "0000000000000000000000000000000000000000000000000000000000000024" +
                // makerAssetData
                "f47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000000000000000000000000000000000000" +
                // 68 - size of takerAssetData
                "0000000000000000000000000000000000000000000000000000000000000044" +
                // takerAssetData
                "025717920000000000000000000000002b4a66557a79263275826ad31a4cddc2789334bd000000000000000000000000000000000000000000000000000000000000762b" +

                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +

                "dfa346c49c159c58d8316978b0f721ecebd10a3c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f715beb51ec8f63317d66f491e37e7bb048fcc2d000000000000000000000000f715beb51ec8f63317d66f491e37e7bb048fcc2d00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000005666e940f00000000000000000000000000000000000000000000000000000000accdd281e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000625935e700000000000000000000000000000000000000000000000000fef66f825d18ca00000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000044025717920000000000000000000000002b4a66557a79263275826ad31a4cddc2789334bd000000000000000000000000000000000000000000000000000000000000762b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000421c7763a38bdc4a8cc3bfdab4302a54c5c76f0aafb5ff54fafb4a809d34d84277dd3a940201f11fd8bf824c2732af189ef6f922ef351157ea0d3a3c13e6c4543db30300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000421c40e0c8008601b2df04d165574e899598e63caa7f7a68f2c2ba274bd088c56e8162513d0f1a69a31770981117d8533133295cef7fa4ec5978376caa8e7ff8c0d10300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000005b3256965e7c3cf26e11fcaf296dfc8807c010730000000000000000000000000000000000000000000000000000228f908060000000000000000000000000000bbdd174198c3bafff09f58d62119e680141ab4400000000000000000000000000000000000000000000000000008a3e42018000"
        )
        every {
            runBlocking {
                traceCallService.findAllRequiredCallInputs(any(), any(), any(), any())
            }
        } returns listOf(txInput)

        val result = zeroExParser.parseMatchOrdersData(
            txHash = Word.apply("0x0000000000000000000000000000000000000000000000000000000000000011"),
            txInput = txInput,
            txFrom = Address.TWO(),
            event = event(),
            index = 1,
            totalLogs = 2,
        )

        val expLeftOrder = ZeroExOrder(
            // seller of order (he sells erc20 and buys nft), it's buyer of nft in this deal
            makerAddress = Address.apply("0x4d3b39791d9bfe56304b32c35fe8f3d411d85a02"),
            takerAddress = Address.apply("0x0000000000000000000000000000000000000000"),
            feeRecipientAddress = Address.apply("0xf715beb51ec8f63317d66f491e37e7bb048fcc2d"),
            senderAddress = Address.apply("0xf715beb51ec8f63317d66f491e37e7bb048fcc2d"),
            makerAssetAmount = 1520000000000000.toBigInteger(),
            takerAssetAmount = 1.toBigInteger(),
            makerFee = 0.toBigInteger(),
            takerFee = 0.toBigInteger(),
            expirationTimeSeconds = 1650013671.toBigInteger(),
            salt = 97119520864459265.toBigInteger(),
            makerAssetData = Binary.apply("0xf47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619"),
            takerAssetData = Binary.apply("0x025717920000000000000000000000002b4a66557a79263275826ad31a4cddc2789334bd000000000000000000000000000000000000000000000000000000000000762b"),
            makerFeeAssetData = Binary.apply("0x"),
            takerFeeAssetData = Binary.apply("0x")
        )
        val expRightOrder = ZeroExOrder(
            // seller of order (he sells nft and buys erc20), it's seller of nft in this deal
            makerAddress = Address.apply("0xdfa346c49c159c58d8316978b0f721ecebd10a3c"),
            takerAddress = Address.apply("0x0000000000000000000000000000000000000000"),
            // fee receiver - zero ex fee wrapper
            feeRecipientAddress = Address.apply("0xf715beb51ec8f63317d66f491e37e7bb048fcc2d"),
            // sender - zero ex fee wrapper
            senderAddress = Address.apply("0xf715beb51ec8f63317d66f491e37e7bb048fcc2d"),
            // how much asset he sells
            makerAssetAmount = 1.toBigInteger(),
            // how much asset he buys
            takerAssetAmount = 1520000000000000.toBigInteger(),
            // seller fee
            makerFee = 190000000000000.toBigInteger(),
            // buyer fee
            takerFee = 0.toBigInteger(),
            expirationTimeSeconds = 1650013671.toBigInteger(),
            salt = 71765602873448650.toBigInteger(),
            // selling asset
            makerAssetData = Binary.apply("0x025717920000000000000000000000002b4a66557a79263275826ad31a4cddc2789334bd000000000000000000000000000000000000000000000000000000000000762b"),
            // buying asset - WETH
            takerAssetData = Binary.apply("0xf47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619"),
            // seller fee asset - WETH
            makerFeeAssetData = Binary.apply("0xf47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619"),
            // buyer fee asset
            takerFeeAssetData = Binary.apply("0x")
        )
        val expLeftSignature =
            Binary.apply("0x1c7763a38bdc4a8cc3bfdab4302a54c5c76f0aafb5ff54fafb4a809d34d84277dd3a940201f11fd8bf824c2732af189ef6f922ef351157ea0d3a3c13e6c4543db303")
        val expRightSignature =
            Binary.apply("0x1c40e0c8008601b2df04d165574e899598e63caa7f7a68f2c2ba274bd088c56e8162513d0f1a69a31770981117d8533133295cef7fa4ec5978376caa8e7ff8c0d103")
        // to whom and how much will feeRecipientAddress send fee
        // (zero ex fee wrapper will send received 190000000000000 WETH to these addresses)
        val expFeeData = listOf(
            ZeroExFeeData(
                recipient = Address.apply("0x5b3256965e7c3cf26e11fcaf296dfc8807c01073"),
                paymentTokenAmount = 38000000000000.toBigInteger()
            ),
            ZeroExFeeData(
                recipient = Address.apply("0x0bbdd174198c3bafff09f58d62119e680141ab44"),
                paymentTokenAmount = 152000000000000.toBigInteger()
            )
        )
        val expPaymentTokenAddress = Address.apply("0x7ceb23fd6bc0add59e62ac25578270cff1b9f619")
        assertThat(result).isEqualTo(
            listOf(
                ZeroExMatchOrdersData(
                    leftOrder = expLeftOrder,
                    takerAddress = null,
                    rightOrder = expRightOrder,
                    leftSignature = expLeftSignature,
                    rightSignature = expRightSignature,
                    feeData = expFeeData,
                    paymentTokenAddress = expPaymentTokenAddress,
                )
            )
        )
    }

    @Test
    fun `parse input for selling by bid order`() = runBlocking<Unit> {
        // https://polygonscan.com/tx/0x41cdc1f41c866cd70b30efa5255044b29326856151709ad3cba99fa8229ee586
        val txInput = Binary.apply(
            "0xbbbfa60c00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000092000000000000000000000000000000000000000000000000000000000000009a00000000000000000000000000000000000000000000000000000000000000a200000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000bf228c81e042502adb2c3a8e281b826c61eea5ec0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f715beb51ec8f63317d66f491e37e7bb048fcc2d000000000000000000000000f715beb51ec8f63317d66f491e37e7bb048fcc2d00000000000000000000000000000000000000000000000000071afd498d000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000624ba58d00000000000000000000000000000000000000000000000001130b237ee4603800000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000003e00000000000000000000000000000000000000000000000000000000000000024f47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144a7cb5fb70000000000000000000000002953399124f0cbb46d2cbacd8a89cf0599974963000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001965f73921d8304e702fabc58e31f1fe07ea5e3680000000000000ef73921d8304e702fabc58e31f1fe07ea5e3680000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f715beb51ec8f63317d66f491e37e7bb048fcc2d000000000000000000000000f715beb51ec8f63317d66f491e37e7bb048fcc2d000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000071afd498d000000000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000624ba58d000000000000000000000000000000000000000000000000000f22f3662102db00000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000144a7cb5fb70000000000000000000000002953399124f0cbb46d2cbacd8a89cf0599974963000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001965f73921d8304e702fabc58e31f1fe07ea5e3680000000000000e00000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000421b99ade9f291e32983f7aca293534f3c72e6ac1c5e671fe757d76cc7eeb22d4d992b93655dd481b4a093a98eab63b6de7f840c8d331f017982fabb515a77e4c5110300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000421c63dabbb9d0fe15914fb890275d551207f0300511bac12394871c898fd6edacf44def7516e1be41effd046efe832ed972ea95eb7f589893430035534aa059e4350300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000005b3256965e7c3cf26e11fcaf296dfc8807c0107300000000000000000000000000000000000000000000000000002d79883d2000000000000000000000000000965f73921d8304e702fabc58e31f1fe07ea5e36800000000000000000000000000000000000000000000000000002d79883d2000"
        )
        every {
            runBlocking {
                traceCallService.findAllRequiredCallInputs(any(), any(), any(), any())
            }
        } returns listOf(txInput)

        val result = zeroExParser.parseMatchOrdersData(
            txHash = Word.apply("0x0000000000000000000000000000000000000000000000000000000000000011"),
            txInput = txInput,
            txFrom = Address.TWO(),
            event = event(),
            index = 1,
            totalLogs = 2,
        )

        val expLeftOrder = ZeroExOrder(
            // seller of order (he sells erc20 and buys nft), it's buyer of nft in this deal
            makerAddress = Address.apply("0xbf228c81e042502adb2c3a8e281b826c61eea5ec"),
            takerAddress = Address.apply("0x0000000000000000000000000000000000000000"),
            feeRecipientAddress = Address.apply("0xf715beb51ec8f63317d66f491e37e7bb048fcc2d"),
            senderAddress = Address.apply("0xf715beb51ec8f63317d66f491e37e7bb048fcc2d"),
            makerAssetAmount = 2000000000000000.toBigInteger(),
            takerAssetAmount = 1.toBigInteger(),
            makerFee = 0.toBigInteger(),
            takerFee = 0.toBigInteger(),
            expirationTimeSeconds = 1649124749.toBigInteger(),
            salt = 77417865676087352.toBigInteger(),
            makerAssetData = Binary.apply("0xf47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619"),
            takerAssetData = Binary.apply("0xa7cb5fb70000000000000000000000002953399124f0cbb46d2cbacd8a89cf0599974963000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001965f73921d8304e702fabc58e31f1fe07ea5e3680000000000000e00000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
            makerFeeAssetData = Binary.apply("0x"),
            takerFeeAssetData = Binary.apply("0x")
        )
        val expRightOrder = ZeroExOrder(
            // seller of order (he sells nft and buys erc20), it's seller of nft in this deal
            makerAddress = Address.apply("0x965f73921d8304e702fabc58e31f1fe07ea5e368"),
            takerAddress = Address.apply("0x0000000000000000000000000000000000000000"),
            // fee receiver - zero ex fee wrapper
            feeRecipientAddress = Address.apply("0xf715beb51ec8f63317d66f491e37e7bb048fcc2d"),
            // sender - zero ex fee wrapper
            senderAddress = Address.apply("0xf715beb51ec8f63317d66f491e37e7bb048fcc2d"),
            // how much asset he sells
            makerAssetAmount = 1.toBigInteger(),
            // how much asset he buys
            takerAssetAmount = 2000000000000000.toBigInteger(),
            // seller fee
            makerFee = 100000000000000.toBigInteger(),
            // buyer fee
            takerFee = 0.toBigInteger(),
            expirationTimeSeconds = 1649124749.toBigInteger(),
            salt = 4260553436496603.toBigInteger(),
            // selling asset
            makerAssetData = Binary.apply("0xa7cb5fb70000000000000000000000002953399124f0cbb46d2cbacd8a89cf0599974963000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001965f73921d8304e702fabc58e31f1fe07ea5e3680000000000000e00000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
            // buying asset - WETH
            takerAssetData = Binary.apply("0xf47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619"),
            // seller fee asset - WETH
            makerFeeAssetData = Binary.apply("0xf47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619"),
            // buyer fee asset
            takerFeeAssetData = Binary.apply("0x")
        )
        val expLeftSignature =
            Binary.apply("0x1b99ade9f291e32983f7aca293534f3c72e6ac1c5e671fe757d76cc7eeb22d4d992b93655dd481b4a093a98eab63b6de7f840c8d331f017982fabb515a77e4c51103")
        val expRightSignature =
            Binary.apply("0x1c63dabbb9d0fe15914fb890275d551207f0300511bac12394871c898fd6edacf44def7516e1be41effd046efe832ed972ea95eb7f589893430035534aa059e43503")
        // to whom and how much will feeRecipientAddress send fee
        val expFeeData = listOf(
            ZeroExFeeData(
                recipient = Address.apply("0x5b3256965e7c3cf26e11fcaf296dfc8807c01073"),
                paymentTokenAmount = 50000000000000.toBigInteger()
            ),
            ZeroExFeeData(
                recipient = Address.apply("0x965f73921d8304e702fabc58e31f1fe07ea5e368"),
                paymentTokenAmount = 50000000000000.toBigInteger()
            )
        )
        val expPaymentTokenAddress = Address.apply("0x7ceb23fd6bc0add59e62ac25578270cff1b9f619")
        assertThat(result).isEqualTo(
            listOf(
                ZeroExMatchOrdersData(
                    leftOrder = expLeftOrder,
                    takerAddress = null,
                    rightOrder = expRightOrder,
                    leftSignature = expLeftSignature,
                    rightSignature = expRightSignature,
                    feeData = expFeeData,
                    paymentTokenAddress = expPaymentTokenAddress,
                )
            )
        )
    }

    @Test
    fun `parse input for buying 1155 by sell order`() = runBlocking<Unit> {
        // 0xf10fb2fd902cbeb9bccef76cc9f4756eff76c92c wanted to sell 19 copies of nft (0,0016 for each)
        // 0x06737052e87392Acad6b5a23C8dED8dd8e4DB07d bought 2 of them
        // https://polygonscan.com/tx/0x7a91f7df871fa7718a4057684951d476db3fa1427604c335fd760bb3bc9ac49e
        val txInput = Binary.apply(
            "0xbbbfa60c00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000092000000000000000000000000000000000000000000000000000000000000009a00000000000000000000000000000000000000000000000000000000000000a200000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000006737052e87392acad6b5a23c8ded8dd8e4db07d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f715beb51ec8f63317d66f491e37e7bb048fcc2d000000000000000000000000f715beb51ec8f63317d66f491e37e7bb048fcc2d000000000000000000000000000000000000000000000000000b8d287f35dc460000000000000000000000000000000000000000000000001bc16d674ec800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000626743c000000000000000000000000000000000000000000000000000c13d464847594c00000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000003e00000000000000000000000000000000000000000000000000000000000000024f47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144a7cb5fb700000000000000000000000022d5f9b75c524fec1d6619787e582644cd4d7422000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000df10fb2fd902cbeb9bccef76cc9f4756eff76c92c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f715beb51ec8f63317d66f491e37e7bb048fcc2d000000000000000000000000f715beb51ec8f63317d66f491e37e7bb048fcc2d00000000000000000000000000000000000000000000000107ad8f556c6c0000000000000000000000000000000000000000000000000000006dbd00b87fac99000000000000000000000000000000000000000000000000000db7a0170ff593000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000626743c0000000000000000000000000000000000000000000000000015c4b78dc431df700000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000144a7cb5fb700000000000000000000000022d5f9b75c524fec1d6619787e582644cd4d7422000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000d10000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000421bd8e7a7950db289cf65676124f061995b92bcec6b0310414629be8e0ed480764f6f7d3d12bb8197f102d9d9939cb2f59ecbb2bfaf89a461480f4751a6b4d463310200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000421b375de0aa1bf7802aa01cacd70ff7beaaa3ba8aca145802f171d877a09cef18c25cee2b100c15de460db738a30178d9776d33615fec28b6eefd0afd0c2ac942eb0200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000005b3256965e7c3cf26e11fcaf296dfc8807c01073000000000000000000000000000000000000000000000000000049edcffaf24e0000000000000000000000000bbdd174198c3bafff09f58d62119e680141ab44000000000000000000000000000000000000000000000000000127b73febc93a"
        )
        every {
            runBlocking {
                traceCallService.findAllRequiredCallInputs(any(), any(), any(), any())
            }
        } returns listOf(txInput)

        val result = zeroExParser.parseMatchOrdersData(
            txHash = Word.apply("0x0000000000000000000000000000000000000000000000000000000000000011"),
            txInput = txInput,
            txFrom = Address.TWO(),
            event = event(),
            index = 1,
            totalLogs = 2,
        )

        val expLeftOrder = ZeroExOrder(
            // seller of order (he sells erc20 and buys nft), it's buyer of nft in this deal
            makerAddress = Address.apply("0x06737052e87392acad6b5a23c8ded8dd8e4db07d"),
            takerAddress = Address.apply("0x0000000000000000000000000000000000000000"),
            feeRecipientAddress = Address.apply("0xf715beb51ec8f63317d66f491e37e7bb048fcc2d"),
            senderAddress = Address.apply("0xf715beb51ec8f63317d66f491e37e7bb048fcc2d"),
            makerAssetAmount = 3251429816261702.toBigInteger(),
            takerAssetAmount = 2000000000000000000.toBigInteger(),
            makerFee = 0.toBigInteger(),
            takerFee = 0.toBigInteger(),
            expirationTimeSeconds = 1650934720.toBigInteger(),
            salt = 54392042574797132.toBigInteger(),
            makerAssetData = Binary.apply("0xf47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619"),
            takerAssetData = Binary.apply("0xa7cb5fb700000000000000000000000022d5f9b75c524fec1d6619787e582644cd4d7422000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000d10000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
            makerFeeAssetData = Binary.apply("0x"),
            takerFeeAssetData = Binary.apply("0x")
        )
        val expRightOrder = ZeroExOrder(
            // seller of order (he sells nft and buys erc20), it's seller of nft in this deal
            makerAddress = Address.apply("0xf10fb2fd902cbeb9bccef76cc9f4756eff76c92c"),
            takerAddress = Address.apply("0x0000000000000000000000000000000000000000"),
            // fee receiver - zero ex fee wrapper
            feeRecipientAddress = Address.apply("0xf715beb51ec8f63317d66f491e37e7bb048fcc2d"),
            // sender - zero ex fee wrapper
            senderAddress = Address.apply("0xf715beb51ec8f63317d66f491e37e7bb048fcc2d"),
            // how much asset he sells
            makerAssetAmount = "19000000000000000000".toBigInteger(),
            // how much asset he buys
            takerAssetAmount = 30888583254486169.toBigInteger(),
            // seller fee
            makerFee = 3861072906810771.toBigInteger(),
            // buyer fee
            takerFee = 0.toBigInteger(),
            expirationTimeSeconds = 1650934720.toBigInteger(),
            salt = 98036274358853111.toBigInteger(),
            // selling asset
            makerAssetData = Binary.apply("0xa7cb5fb700000000000000000000000022d5f9b75c524fec1d6619787e582644cd4d7422000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000d10000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
            // buying asset - WETH
            takerAssetData = Binary.apply("0xf47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619"),
            // seller fee asset - WETH
            makerFeeAssetData = Binary.apply("0xf47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619"),
            // buyer fee asset
            takerFeeAssetData = Binary.apply("0x")
        )
        val expLeftSignature =
            Binary.apply("0x1bd8e7a7950db289cf65676124f061995b92bcec6b0310414629be8e0ed480764f6f7d3d12bb8197f102d9d9939cb2f59ecbb2bfaf89a461480f4751a6b4d4633102")
        val expRightSignature =
            Binary.apply("0x1b375de0aa1bf7802aa01cacd70ff7beaaa3ba8aca145802f171d877a09cef18c25cee2b100c15de460db738a30178d9776d33615fec28b6eefd0afd0c2ac942eb02")
        // to whom and how much will feeRecipientAddress send fee
        val expFeeData = listOf(
            ZeroExFeeData(
                recipient = Address.apply("0x5b3256965e7c3cf26e11fcaf296dfc8807c01073"),
                paymentTokenAmount = 81285745406542.toBigInteger()
            ),
            ZeroExFeeData(
                recipient = Address.apply("0x0bbdd174198c3bafff09f58d62119e680141ab44"),
                paymentTokenAmount = 325142981626170.toBigInteger()
            )
        )
        val expPaymentTokenAddress = Address.apply("0x7ceb23fd6bc0add59e62ac25578270cff1b9f619")
        assertThat(result).isEqualTo(
            listOf(
                ZeroExMatchOrdersData(
                    leftOrder = expLeftOrder,
                    takerAddress = null,
                    rightOrder = expRightOrder,
                    leftSignature = expLeftSignature,
                    rightSignature = expRightSignature,
                    feeData = expFeeData,
                    paymentTokenAddress = expPaymentTokenAddress,
                )
            )
        )
    }

    @Test
    fun `parse input for buying by exchange contract without wrapper`() = runBlocking<Unit> {
        // https://polygonscan.com/tx/0x1efb1f068973aeee1fa4169bd81d17bc20ab0b7d4617390ef570441b7416e81c
        val txInput = Binary.apply(
            "0x88ec79fb" +
                "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000004a000000000000000000000000000000000000000000000000000000000000008e0000000000000000000000000000000000000000000000000000000000000096000000000000000000000000087f3df4936a9e1c63685996c4c7e66e86eea9a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005b3256965e7c3cf26e11fcaf296dfc8807c010730000000000000000000000009b814233894cd227f561b78cc65891aa55c62ad20000000000000000000000000000000000000000000000000001c6bf52634000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000072b58df1616b6500000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000003e00000000000000000000000000000000000000000000000000000000000000024f47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144a7cb5fb7000000000000000000000000344461cd5f714aac9c5c18cacf7727c740818ef9000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000cbb7c6ae56d2f0a1dc11d3cfcf9bd999138e8712000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005b3256965e7c3cf26e11fcaf296dfc8807c010730000000000000000000000009b814233894cd227f561b78cc65891aa55c62ad200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000001c6bf5263400000000000000000000000000000000000000000000000000000000b5e620f48000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000004731d5f75b6e3100000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000144a7cb5fb7000000000000000000000000344461cd5f714aac9c5c18cacf7727c740818ef9000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000cf47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000421c8233dcd619b88ab01aec3a444cda38f9af292a4aae73057f454e3070410ac1a96328266a145e3d5dd0f791da9cf50d6ba62c65a089edbfed0ab2a74428ec73dc0200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000421cfcae5c296a1b48db2802c22e1193bb0c36cd6e6707e49cad084121c69dc2bd29099bfbb31cf7f34ebca9ea62a1fde053e370638b3f26d8789c610872f4f4ed5703000000000000000000000000000000000000000000000000000000000000"
        )

        every {
            runBlocking {
                traceCallService.findAllRequiredCallInputs(any(), any(), any(), any())
            }
        } returns listOf(txInput)

        val result = zeroExParser.parseMatchOrdersData(
            txHash = Word.apply("0x0000000000000000000000000000000000000000000000000000000000000011"),
            txInput = txInput,
            txFrom = Address.TWO(),
            event = event(),
            index = 1,
            totalLogs = 2,
        )

        val expLeftOrder = ZeroExOrder(
            // seller of order (he sells erc20 and buys nft), it's buyer of nft in this deal
            makerAddress = Address.apply("0x87f3df4936a9e1c63685996c4c7e66e86eea9a00"),
            takerAddress = Address.apply("0x0000000000000000000000000000000000000000"),
            feeRecipientAddress = Address.apply("0x5b3256965e7c3cf26e11fcaf296dfc8807c01073"),
            senderAddress = Address.apply("0x9b814233894cd227f561b78cc65891aa55c62ad2"),
            makerAssetAmount = 500000000000000.toBigInteger(),
            takerAssetAmount = 1.toBigInteger(),
            makerFee = 0.toBigInteger(),
            takerFee = 0.toBigInteger(),
            expirationTimeSeconds = "115792089237316195423570985008687907853269984665640564039457584007913129639935".toBigInteger(),
            salt = 32287768589724517.toBigInteger(),
            makerAssetData = Binary.apply("0xf47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619"),
            takerAssetData = Binary.apply("0xa7cb5fb7000000000000000000000000344461cd5f714aac9c5c18cacf7727c740818ef9000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000001100030000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
            makerFeeAssetData = Binary.apply("0x"),
            takerFeeAssetData = Binary.apply("0x")
        )
        val expRightOrder = ZeroExOrder(
            // seller of order (he sells nft and buys erc20), it's seller of nft in this deal
            makerAddress = Address.apply("0xbb7c6ae56d2f0a1dc11d3cfcf9bd999138e87120"),
            takerAddress = Address.apply("0x0000000000000000000000000000000000000000"),
            // fee receiver - zero ex fee wrapper
            feeRecipientAddress = Address.apply("0x5b3256965e7c3cf26e11fcaf296dfc8807c01073"),
            // sender - zero ex fee wrapper
            senderAddress = Address.apply("0x9b814233894cd227f561b78cc65891aa55c62ad2"),
            // how much asset he sells
            makerAssetAmount = 1.toBigInteger(),
            // how much asset he buys
            takerAssetAmount = 500000000000000.toBigInteger(),
            // seller fee
            makerFee = 12500000000000.toBigInteger(),
            // buyer fee
            takerFee = 0.toBigInteger(),
            expirationTimeSeconds = "115792089237316195423570985008687907853269984665640564039457584007913129639935".toBigInteger(),
            salt = 20039518394215985.toBigInteger(),
            // selling asset
            makerAssetData = Binary.apply("0xa7cb5fb7000000000000000000000000344461cd5f714aac9c5c18cacf7727c740818ef9000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000001100030000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
            // buying asset - WETH
            takerAssetData = Binary.apply("0xf47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619"),
            // seller fee asset - WETH
            makerFeeAssetData = Binary.apply("0xf47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619"),
            // buyer fee asset
            takerFeeAssetData = Binary.apply("0x")
        )
        val expLeftSignature =
            Binary.apply("0x1c8233dcd619b88ab01aec3a444cda38f9af292a4aae73057f454e3070410ac1a96328266a145e3d5dd0f791da9cf50d6ba62c65a089edbfed0ab2a74428ec73dc02")
        val expRightSignature =
            Binary.apply("0x1cfcae5c296a1b48db2802c22e1193bb0c36cd6e6707e49cad084121c69dc2bd29099bfbb31cf7f34ebca9ea62a1fde053e370638b3f26d8789c610872f4f4ed5703")
        // only wrapper has fields for feeData and PaymentTokenAddress
        val expFeeData = listOf<ZeroExFeeData>()
        val expPaymentTokenAddress = Address.ZERO()
        assertThat(result).isEqualTo(
            listOf(
                ZeroExMatchOrdersData(
                    leftOrder = expLeftOrder,
                    takerAddress = null,
                    rightOrder = expRightOrder,
                    leftSignature = expLeftSignature,
                    rightSignature = expRightSignature,
                    feeData = expFeeData,
                    paymentTokenAddress = expPaymentTokenAddress,
                )
            )
        )
    }

    @Test
    fun `parse input for filling order without using wrapper`() = runBlocking<Unit> {
        // https://polygonscan.com/tx/0xa8c10cfa5bdfa688125ba54da5324af6e47aed4e3fb028b5d9440576414b31af
        val txInput = Binary.apply(
            "0x9b44d556" +
                "0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000001158e460913d0000000000000000000000000000000000000000000000000000000000000000003200000000000000000000000002369d6675a6d9dfc7c18690d3bc59b2b103be687000000000000000000000000000000000000000000000000000000000000000000000000000000000000000086643337545d6ca42802c4225c5f5ab2879c2da800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000f43fc2c04ee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000214e8348c4f0000000000000000000000000000000000000000000000000000000000187e7d3fe8880f049cb3711833c071baa7f64350a06cc32ae54614303ab7866339970168d6600000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000004402571792000000000000000000000000a2b2f906799c67f336b93875fdda077428082097000000000000000000000000000000000000000000000000000000000000039a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b00000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000421b29cb9393e3bdcab129f1739ebf2b9c79f594cdb0f3fbc8da5d1781bd16a702d664a31508f5ef302d6f0c502bf47bec3d92f1e4369a05222efda85d6b16aa8fbc02000000000000000000000000000000000000000000000000000000000000"
        )
        every {
            runBlocking {
                traceCallService.findAllRequiredCallInputs(any(), any(), any(), any())
            }
        } returns listOf(txInput)

        val txFrom = Address.TWO()
        val result = zeroExParser.parseMatchOrdersData(
            txHash = Word.apply("0x0000000000000000000000000000000000000000000000000000000000000011"),
            txInput = txInput,
            txFrom = txFrom,
            event = event(),
            index = 0,
            totalLogs = 1,
        )

        val expLeftOrder = ZeroExOrder(
            makerAddress = Address.apply("0x2369d6675a6d9dfc7c18690d3bc59b2b103be687"),
            takerAddress = Address.apply("0x0000000000000000000000000000000000000000"),
            feeRecipientAddress = Address.apply("0x86643337545d6ca42802c4225c5f5ab2879c2da8"),
            senderAddress = Address.apply("0x0000000000000000000000000000000000000000"),
            makerAssetAmount = 1.toBigInteger(),
            takerAssetAmount = "17600000000000000000".toBigInteger(),
            makerFee = 0.toBigInteger(),
            takerFee = 2400000000000000000.toBigInteger(),
            expirationTimeSeconds = 1683221642888.toBigInteger(),
            salt = "58320597220356779415445296781632092438604019419578583730965893787042564181350".toBigInteger(),
            makerAssetData = Binary.apply("0x02571792000000000000000000000000a2b2f906799c67f336b93875fdda077428082097000000000000000000000000000000000000000000000000000000000000039a"),
            takerAssetData = Binary.apply("0xf47261b00000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270"),
            makerFeeAssetData = Binary.apply("0x"),
            takerFeeAssetData = Binary.apply("0xf47261b00000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270")
        )
        val expRightOrder: ZeroExOrder? = null
        val expLeftSignature =
            Binary.apply("0x1b29cb9393e3bdcab129f1739ebf2b9c79f594cdb0f3fbc8da5d1781bd16a702d664a31508f5ef302d6f0c502bf47bec3d92f1e4369a05222efda85d6b16aa8fbc02")
        val expRightSignature: Binary? = null
        // only wrapper has fields for feeData and PaymentTokenAddress
        val expFeeData = listOf<ZeroExFeeData>()
        val expPaymentTokenAddress = Address.ZERO()
        assertThat(result).isEqualTo(
            listOf(
                ZeroExMatchOrdersData(
                    leftOrder = expLeftOrder,
                    takerAddress = txFrom,
                    rightOrder = expRightOrder,
                    leftSignature = expLeftSignature,
                    rightSignature = expRightSignature,
                    feeData = expFeeData,
                    paymentTokenAddress = expPaymentTokenAddress,
                )
            )
        )
    }

    @Test
    fun `parse input for batch fill order without using wrapper via execute transaction`() = runBlocking<Unit> {
        // https://polygonscan.com/tx/0xe7401512c49e2c16ea053e9f6c8350c914f77f9c5df1974724da6ae28ad19e7e
        val txInput = Binary.apply(
            "0x9694a402" +
                "0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000008d38138310158522220499731ee17d2a36d2dda300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d056bb17ad4df5593b93a1efc29cb35ba4aa38d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000e302875600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005d21dba0000000000000000000000000000000000000000000000000000000000614a383d00000000000000000000000000000000000000000000000000000179aa609f3f00000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000044025717920000000000000000000000009928a8ea82d86290dfd1920e126b3872890525b3000000000000000000000000000000000000000000000000000000000000f0be0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000e3028756000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000421ba9c51bf51a3af426c6b833e8a32affeb51929ddbcd3c28307aa25b49e8e393207430c9f73cef36845ae17f06e68eca5dcdca3b68927ebf7e83dc8335b540f07302000000000000000000000000000000000000000000000000000000000000"
        )
        every {
            runBlocking {
                traceCallService.findAllRequiredCallInputs(any(), any(), any(), any())
            }
        } returns listOf(txInput)

        val txFrom = Address.TWO()
        val result = zeroExParser.parseMatchOrdersData(
            txHash = Word.apply("0x0000000000000000000000000000000000000000000000000000000000000011"),
            txInput = txInput,
            txFrom = txFrom,
            event = event(),
            index = 0,
            totalLogs = 1,
        )

        val expLeftOrder = ZeroExOrder(
            makerAddress = Address.apply("0x8d38138310158522220499731ee17d2a36d2dda3"),
            takerAddress = Address.apply("0x0000000000000000000000000000000000000000"),
            feeRecipientAddress = Address.apply("0x0d056bb17ad4df5593b93a1efc29cb35ba4aa38d"),
            senderAddress = Address.apply("0x0000000000000000000000000000000000000000"),
            makerAssetAmount = 1.toBigInteger(),
            takerAssetAmount = 975000000000.toBigInteger(),
            makerFee = 0.toBigInteger(),
            takerFee = 25000000000.toBigInteger(),
            expirationTimeSeconds = 1632254013.toBigInteger(),
            salt = 1622061129535.toBigInteger(),
            makerAssetData = Binary.apply("0x025717920000000000000000000000009928a8ea82d86290dfd1920e126b3872890525b3000000000000000000000000000000000000000000000000000000000000f0be"),
            takerAssetData = Binary.apply("0xf47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619"),
            makerFeeAssetData = Binary.apply("0x"),
            takerFeeAssetData = Binary.apply("0xf47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619")
        )
        val expRightOrder: ZeroExOrder? = null
        val expLeftSignature =
            Binary.apply("0x1ba9c51bf51a3af426c6b833e8a32affeb51929ddbcd3c28307aa25b49e8e393207430c9f73cef36845ae17f06e68eca5dcdca3b68927ebf7e83dc8335b540f07302")
        val expRightSignature: Binary? = null
        // only wrapper has fields for feeData and PaymentTokenAddress
        val expFeeData = listOf<ZeroExFeeData>()
        val expPaymentTokenAddress = Address.ZERO()
        assertThat(result).isEqualTo(
            listOf(
                ZeroExMatchOrdersData(
                    leftOrder = expLeftOrder,
                    takerAddress = txFrom,
                    rightOrder = expRightOrder,
                    leftSignature = expLeftSignature,
                    rightSignature = expRightSignature,
                    feeData = expFeeData,
                    paymentTokenAddress = expPaymentTokenAddress,
                )
            )
        )
    }

    @Test
    fun `parse input for filling order without using wrapper via execute transaction`() = runBlocking<Unit> {
        // https://polygonscan.com/tx/0x48a3a2fdccbbb61a9dc90f88969b9095d5b64aac11c504492bf105a00184558e
        val txInput = Binary.apply(
            "0x2280c910" +
                "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000004c035437f9a48374b93dabe22474c45d0a3b758019b55004476185443356a2f3594000000000000000000000000000000000000000000000000000000009b590daa00000000000000000000000000000000000000000000000000000002540be40000000000000000000000000028e9e72dbf7adee19b5279c23e40a1b0b35c2b9000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000003a49b44d55600000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000000000000000000000000000000000000000000320000000000000000000000000fd71dc9721d9ddcf0480a582927c3dcd42f3064c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004e8c5dcd73df0448058e28b5205d1c63df7b30d900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009b590daa1aa2e766c2d1fc52a08eb013e6ad3628519bb229035dd4e39cc694676b95e07200000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000004402571792000000000000000000000000f556faf23fc2feefa33ee6db2d1ee4c70e5345130000000000000000000000000000000000000000000000000000000000005ddc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000421c2c006ba9ecdbb480081982164d560ec9bc5c5ce92e94c0521ed7e667676708d74843ce7f20ecda9814a075eed6041faf29e34a40e6a654680713a5f69e81dc84020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000421bf7898d51be001afece6b763c602a5d6f552d80d2d3f80f60ba7ac52d6eb866640358d64ca1263388b2ba1714e69f535ad2aca0e6b90f4612688844908a4bae1c02000000000000000000000000000000000000000000000000000000000000"
        )
        every {
            runBlocking {
                traceCallService.findAllRequiredCallInputs(any(), any(), any(), any())
            }
        } returns listOf(txInput)

        val result = zeroExParser.parseMatchOrdersData(
            txHash = Word.apply("0x0000000000000000000000000000000000000000000000000000000000000011"),
            txInput = txInput,
            txFrom = Address.TWO(),
            event = event(),
            index = 0,
            totalLogs = 1,
        )

        val expLeftOrder = ZeroExOrder(
            makerAddress = Address.apply("0xfd71dc9721d9ddcf0480a582927c3dcd42f3064c"),
            takerAddress = Address.apply("0x0000000000000000000000000000000000000000"),
            feeRecipientAddress = Address.apply("0x0000000000000000000000000000000000000000"),
            senderAddress = Address.apply("0x4e8c5dcd73df0448058e28b5205d1c63df7b30d9"),
            makerAssetAmount = 1.toBigInteger(),
            takerAssetAmount = 100000000.toBigInteger(),
            makerFee = 0.toBigInteger(),
            takerFee = 0.toBigInteger(),
            expirationTimeSeconds = 2606304682.toBigInteger(),
            salt = "12047960361496660692565557008105990584652694753737259192586063368287822405746".toBigInteger(),
            makerAssetData = Binary.apply("0x02571792000000000000000000000000f556faf23fc2feefa33ee6db2d1ee4c70e5345130000000000000000000000000000000000000000000000000000000000005ddc"),
            takerAssetData = Binary.apply("0xf47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619"),
            makerFeeAssetData = Binary.apply("0x"),
            takerFeeAssetData = Binary.apply("0x")
        )
        val expRightOrder: ZeroExOrder? = null
        val expLeftSignature =
            Binary.apply("0x1c2c006ba9ecdbb480081982164d560ec9bc5c5ce92e94c0521ed7e667676708d74843ce7f20ecda9814a075eed6041faf29e34a40e6a654680713a5f69e81dc8402")
        val expRightSignature: Binary? = null
        // only wrapper has fields for feeData and PaymentTokenAddress
        val expFeeData = listOf<ZeroExFeeData>()
        val expPaymentTokenAddress = Address.ZERO()
        assertThat(result).isEqualTo(
            listOf(
                ZeroExMatchOrdersData(
                    leftOrder = expLeftOrder,
                    takerAddress = Address.apply("0x28e9e72dbf7adee19b5279c23e40a1b0b35c2b90"),
                    rightOrder = expRightOrder,
                    leftSignature = expLeftSignature,
                    rightSignature = expRightSignature,
                    feeData = expFeeData,
                    paymentTokenAddress = expPaymentTokenAddress,
                )
            )
        )
    }

    private fun event(): FillEvent {
        return FillEvent(
            Log(
                BigInteger.ONE, // logIndex
                BigInteger.TEN, // transactionIndex
                Word.apply(ByteArray(32)), // transactionHash
                Word.apply(ByteArray(32)), // blockHash
                BigInteger.ZERO, // blockNumber
                Address.ZERO(), // address
                Binary.apply( // data
                    "0000000000000000000000000000000000000000000000000000000000000160" +
                        "00000000000000000000000000000000000000000000000000000000000001c0" +
                        "0000000000000000000000000000000000000000000000000000000000000340" +
                        "0000000000000000000000000000000000000000000000000000000000000360" +
                        "000000000000000000000000f715beb51ec8f63317d66f491e37e7bb048fcc2d" +
                        "000000000000000000000000f715beb51ec8f63317d66f491e37e7bb048fcc2d" +
                        "000000000000000000000000000000000000000000000000000b8d287f35dc46" +
                        "0000000000000000000000000000000000000000000000001bc16d674ec80000" +
                        "0000000000000000000000000000000000000000000000000000000000000000" +
                        "0000000000000000000000000000000000000000000000000000000000000000" +
                        "000000000000000000000000000000000000000000000000002aa1efb94e0000" +
                        "0000000000000000000000000000000000000000000000000000000000000024" +
                        "f47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cf" +
                        "f1b9f61900000000000000000000000000000000000000000000000000000000" +
                        "0000000000000000000000000000000000000000000000000000000000000144" +
                        "a7cb5fb700000000000000000000000022d5f9b75c524fec1d6619787e582644" +
                        "cd4d742200000000000000000000000000000000000000000000000000000000" +
                        "0000008000000000000000000000000000000000000000000000000000000000" +
                        "000000c000000000000000000000000000000000000000000000000000000000" +
                        "0000010000000000000000000000000000000000000000000000000000000000" +
                        "0000000100000000000000000000000000000000000000000000000000000000" +
                        "000000d100000000000000000000000000000000000000000000000000000000" +
                        "0000000100000000000000000000000000000000000000000000000000000000" +
                        "0000000100000000000000000000000000000000000000000000000000000000" +
                        "0000000000000000000000000000000000000000000000000000000000000000" +
                        "0000000000000000000000000000000000000000000000000000000000000000" +
                        "0000000000000000000000000000000000000000000000000000000000000000" +
                        "0000000000000000000000000000000000000000000000000000000000000000"
                ),
                false, // removed
                Lists.toScala( // topics
                    listOf(
                        Word.apply("0x0000000000000000000000000000000000000000000000000000000000000010"),
                        Word.apply("0x0000000000000000000000000000000000000000000000000000000000000020"),
                        Word.apply("0x0000000000000000000000000000000000000000000000000000000000000030"),
                        Word.apply("0x0000000000000000000000000000000000000000000000000000000000000040"),
                    )
                ),
                "" // type
            ),
            Address.ONE(), // makerAddress
            Address.TWO(), // feeRecipientAddress
            Binary.apply("0x0000000000000000000000000000000000000000000000000000000000000022").bytes(), // orderHash
            Binary.apply("0x0000000000000000000000000000000000000000000000000000000000000033")
                .bytes(), // makerAssetData
            Binary.apply("0x0000000000000000000000000000000000000000000000000000000000000044")
                .bytes(), // takerAssetData
            Binary.apply("0x").bytes(), // makerFeeAssetData
            Binary.apply("0x").bytes(), // takerFeeAssetData
            Address.THREE(), // takerAddress
            Address.FOUR(), // senderAddress
            1000.toBigInteger(), // makerAssetFilledAmount
            1.toBigInteger(), // takerAssetFilledAmount
            0.toBigInteger(), // makerFeePaid
            0.toBigInteger(), // takerFeePaid
            400.toBigInteger() // protocolFeePaid
        )
    }
}
