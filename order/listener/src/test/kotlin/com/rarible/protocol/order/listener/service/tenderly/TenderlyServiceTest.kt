package com.rarible.protocol.order.listener.service.tenderly

import com.mongodb.reactivestreams.client.MongoClients
import com.rarible.core.test.containers.MongodbTestContainer
import com.rarible.ethereum.domain.Blockchain
import com.rarible.protocol.order.api.ApiClient
import com.rarible.protocol.order.core.configuration.OrderIndexerProperties
import com.rarible.protocol.order.core.model.BuyTx
import com.rarible.protocol.order.core.model.tenderly.TenderlyStat
import com.rarible.protocol.order.core.repository.tenderly.TenderlyRepository
import com.rarible.protocol.order.listener.configuration.OrderListenerProperties
import com.rarible.protocol.order.listener.configuration.TenderlyProperties
import io.mockk.every
import io.mockk.mockk
import kotlinx.coroutines.reactive.awaitFirstOrNull
import kotlinx.coroutines.runBlocking
import okhttp3.mockwebserver.MockResponse
import okhttp3.mockwebserver.MockWebServer
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.springframework.data.mongodb.core.ReactiveMongoTemplate
import org.springframework.http.HttpHeaders
import org.springframework.http.MediaType
import java.math.BigInteger
import java.time.LocalDate

class TenderlyServiceTest {

    val mapper = ApiClient.createDefaultObjectMapper()

    val mockServer = MockWebServer()
    val common: OrderIndexerProperties = mockk() {
        every { blockchain } returns Blockchain.ETHEREUM
    }
    val props = OrderListenerProperties(
        tenderlyProperties = TenderlyProperties(
            url = "http://:network:${mockServer.port}",
            apiKey = "12345",
            mapping = mapOf(
                "ethereum" to "localhost"
            ),
            requestsPerMonth = 5
        )
    )

    private val mongoTest = MongodbTestContainer()
    private val mongoTemplate = ReactiveMongoTemplate(MongoClients.create(mongoTest.connectionString()), "test")
    val repository = TenderlyRepository(mongoTemplate)
    val service = TenderlyService(common, props, repository)

    @BeforeEach
    fun cleanDb() = runBlocking<Unit> {
        mongoTemplate.dropCollection(TenderlyStat::class.java).awaitFirstOrNull()
    }

    @Test
    fun `simulate - ok`() = runBlocking<Unit> {
        val mockedResult = TenderlyService.SimulateResponse(
            id = "",
            jsonrpc = "",
            result = TenderlyService.SimulateResponse.ResponseResult(status = true),
            error = null
        )
        mockServer.enqueue(mockOkResponse(mockedResult))

        val buyTx = BuyTx(
            from = "0xa3b2d9ffe53b509f917f47f7531f15d73b99b913",
            to = "0x9757F2d2b135150BBeb65308D4a91804107cd8D6",
            value = BigInteger.valueOf(10100000000000000L),
            data = "0x0d5f7d350000000000000000000000000000000000000000000000000000000000000020000000000000000000000000f5cecabbd523505a31c1bf222cbbe957e90b5f330000000000000000000000000000000000000000000000000000000000000001973bb6400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000000000000000000000ab5da5fb17258b45595dd699d45fa44fc39fc23a51d6f240e9c621a4703014750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006533912423d235ef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000360000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000003e00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000d07dc4262bcdbf85190c01c996b4c06a461d243000000000000000000000000000000000000000000000000000000000000164e300000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000001cf0df2a5a20cd61d68d4489eebbf85b8d39e18a00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000041950e17f9efede3e311d2d979fdc71a9137bd40f8ff3b5dc7483eb0c09469104e49a2d04e46fba4be11e13c131de86b91d30da6bba30722e5666662b7f083b84a1b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a3b2d9ffe53b509f917f47f7531f15d73b99b913000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000010000000000000000000000001cf0df2a5a20cd61d68d4489eebbf85b8d39e18a0000000000000000000000000000000000000000000000000000000000000064"
        )
        val simulationResult = service.simulate(buyTx)

        assertThat(simulationResult).isEqualTo(SimulationResult(true))

        // check request
        assertThat(mockServer.requestCount).isEqualTo(1)
        assertThat(mockServer.takeRequest().path).isEqualTo("/12345")

        // check stats
        assertThat(repository.requestsByMonth()).isEqualTo(1L)
        val stats = repository.getById(LocalDate.now())!!
        assertThat(stats.attempts).isEqualTo(1L)
        assertThat(stats.requests).isEqualTo(1L)
    }

    @Test
    fun `check counter - ok`() = runBlocking<Unit> {
        // empty db
        assertThat(repository.requestsByMonth()).isEqualTo(0L)

        // saved 1 record
        repository.save(TenderlyStat.create(LocalDate.now()))
        assertThat(repository.requestsByMonth()).isEqualTo(0L)
    }

    @Test
    fun `check limit - ok`() = runBlocking<Unit> {
        val mockedResult = TenderlyService.SimulateResponse(
            id = "",
            jsonrpc = "",
            result = TenderlyService.SimulateResponse.ResponseResult(status = true),
            error = null
        )
        repeat(5) { mockServer.enqueue(mockOkResponse(mockedResult)) }

        val buyTx = BuyTx(
            from = "0xa3b2d9ffe53b509f917f47f7531f15d73b99b913",
            to = "0x9757F2d2b135150BBeb65308D4a91804107cd8D6",
            value = BigInteger.valueOf(10100000000000000L),
            data = "0x0d5f7d350000000000000000000000000000000000000000000000000000000000000020000000000000000000000000f5cecabbd523505a31c1bf222cbbe957e90b5f330000000000000000000000000000000000000000000000000000000000000001973bb6400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000000000000000000000ab5da5fb17258b45595dd699d45fa44fc39fc23a51d6f240e9c621a4703014750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006533912423d235ef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000360000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000003e00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000d07dc4262bcdbf85190c01c996b4c06a461d243000000000000000000000000000000000000000000000000000000000000164e300000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000001cf0df2a5a20cd61d68d4489eebbf85b8d39e18a00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000041950e17f9efede3e311d2d979fdc71a9137bd40f8ff3b5dc7483eb0c09469104e49a2d04e46fba4be11e13c131de86b91d30da6bba30722e5666662b7f083b84a1b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a3b2d9ffe53b509f917f47f7531f15d73b99b913000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000010000000000000000000000001cf0df2a5a20cd61d68d4489eebbf85b8d39e18a0000000000000000000000000000000000000000000000000000000000000064"
        )
        repeat(5) {
            val result = service.simulate(buyTx)
            assertThat(result).isEqualTo(SimulationResult(true))
        }

        val stats = repository.getById(LocalDate.now())!!
        assertThat(stats.attempts).isEqualTo(5L)
        assertThat(stats.requests).isEqualTo(5L)

        repeat(5) {
            val result = service.simulate(buyTx)
            assertThat(result.status).isEqualTo(false)
            assertThat(result.reachLimit).isEqualTo(true)
        }

        val failedStats = repository.getById(LocalDate.now())!!
        assertThat(failedStats.attempts).isEqualTo(10L)
        assertThat(failedStats.requests).isEqualTo(5L)

        assertThat(mockServer.requestCount).isEqualTo(5)
    }

    private fun mockOkResponse(result: TenderlyService.SimulateResponse): MockResponse {
        return MockResponse()
            .setBody(mapper.writeValueAsString(result))
            .setResponseCode(200)
            .setHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON.toString())
    }
}
